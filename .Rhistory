fig.align='center',
warning = FALSE,
fig.show='hold',
fig.width=11,
fig.height=5) # Par défaut, le code n'est pas afficher mais les résultats ( les sorties) le seront.
#### On en profite pour mettre en place les packages et les seeds.
library(knitr)
library(magrittr)
library(dplyr)
library(corrplot)
data <- read.csv("C:/Users/MBozon/Documents/ISFA/Series temporelles/Memoire/Donnees.csv", sep = ";")
names(data) <- c("Periode",
"Production.Totale.Brute",
"Production.Totale.Nette",
"Production.Primaire.Brute",
"Production.Primaire.Nette",
"Production.Nucléaire.Brute",
"Production.Nucleaire.Nette",
"Production.Hydraulique.Brute",
"Production.Hydraulique.Nette",
"Production.Eolienne.Brute",
"Production.Eolienne.Nette",
"Production.Photovoltaique.Brute",
"Production.Photovoltaique.Nette",
"Production.Thermique.Brute",
"Production.Thermique.Nette",
"Électricité absorbée pour les pompages (en GWh)",
"Importations",
"Exportations",
"Energie appelee reelle yc pertes",
"Livraisons.BasseTension",
"Livraisons.MoyenneTension",
"Livraisons.HauteTension",
"Energie appelée réelle yc pertes corrigée du climat",
"Livraisons.BasseTension.CorClimat",
"Livraisons.MoyenneTension.CorClimat",
"Consommation.Primaire",
"Consommation.Primaire.CorClimat",
"Puissance.maximale.appelee",
"Indice.Climatique"
)
data <- read.csv("C:/Users/MBozon/Documents/ISFA/Series temporelles/Memoire/Donnees.csv", sep = ",")
#### On en profite pour mettre en place les packages et les seeds.
library(knitr)
library(magrittr)
library(dplyr)
library(corrplot)
data <- read.csv("Donnees.csv", sep = ";", header = T)
names(data) <- c("Periode",
"Production.Totale.Brute",
"Production.Totale.Nette",
"Production.Primaire.Brute",
"Production.Primaire.Nette",
"Production.Nucleaire.Brute",
"Production.Nucleaire.Nette",
"Production.Hydraulique.Brute",
"Production.Hydraulique.Nette",
"Production.Eolienne.Brute",
"Production.Eolienne.Nette",
"Production.Photovoltaique.Brute",
"Production.Photovoltaique.Nette",
"Production.Thermique.Brute",
"Production.Thermique.Nette",
"Electricite.absorbee.pour.les.pompages.(en.GWh)",
"Importations",
"Exportations",
"Energie.appelee.reelle.yc.pertes",
"Livraisons.BasseTension",
"Livraisons.MoyenneTension",
"Livraisons.HauteTension",
"Energie.appelee.reelle.yc.pertes.corrigee.du.climat",
"Livraisons.BasseTension.CorClimat",
"Livraisons.MoyenneTension.CorClimat",
"Consommation.Primaire",
"Consommation.Primaire.CorClimat",
"Puissance.maximale.appelee",
"Indice.Climatique"
)
head(data)
ts.production.Totale.Brute <- ts(data$Production.Totale.Brute, frequency = 12, start = c(1981, 1), end = c(2017, 11))
ts.import <- ts(data$Importations, frequency = 12,  start = c(1981,1), end = c(2017, 11))
ts.photo <- ts(data$Production.Photovoltaique.Brute, frequency = 12, start = c(1981,1), end = c(2017,11))
plot(decompose(ts.import, type = "additive"))
plot(decompose(ts.import, type = "multiplicative"))
ts.production.Totale.Brute <- ts(data$Production.Totale.Brute, frequency = 12, start = c(1981, 1), end = c(2017, 11))
ts.import <- ts(data$Importations, frequency = 12,  start = c(1981,1), end = c(2017, 11))
ts.photo <- ts(data$Production.Photovoltaique.Brute, frequency = 12, start = c(1981,1), end = c(2017,11))
plot(decompose(ts.import, type = "additive"))
plot(ts.production.Totale.Brute, ylab = "Production totale d'electricite brute", type = "l")
view(data)
view(data)
View(x = data)
?ts
corr(ts.production.Totale.Brute)
cor(ts.production.Totale.Brute)
cor(ts.production.Totale.Brute, ts.production.Totale.Brute)
decompose(ts)
decompose(ts,filter = "s")
?decompose
decompose(ts,type = "additive")
plot(decompose(ts.import, type = "additive"))
ts.import
ts.photo <- ts(data$Production.Photovoltaique.Brute, frequency = 12, start = c(1981,1), end = c(2017,11))
ts.production.Totale.Brute <- ts(data$Production.Totale.Brute, frequency = 12, start = c(1981, 1), end = c(2017, 11))
decompose(ts.production.Totale.Brute)
ts.decomposed.productionTotaleBrute <- ts.production.Totale.Brute
ts.decomposed.productionTotaleBrute <- decompose(ts.decomposed.productionTotaleBrute)
plot(ts.decomposed.productionTotaleBrute$trend)
plot(ts.decomposed.productionTotaleBrute$seasonal)
plot(ts.decomposed.productionTotaleBrute$random)
acf(ts.decomposed.productionTotaleBrute$random)
acf(x = ts.decomposed.productionTotaleBrute$random)
pacf(x = ts.decomposed.productionTotaleBrute$random)
pacf(ts.decomposed.productionTotaleBrute)
pacf(ts.production.Totale.Brute)
ts.decomposed.productionTotaleBrute %<% as.ts(.)
install.packages("dplyr")
install.packages("dplyr")
ts.decomposed.productionTotaleBrute %<% as.ts(.)
library(dplyr)
ts.decomposed.productionTotaleBrute %<% as.ts(.)
ts.decomposed.productionTotaleBrute <- as.ts(ts.decomposed.productionTotaleBrute)
plot(ts.decomposed.productionTotaleBrute)
ts.production.Totale.Brute - ts.decomposed.productionTotaleBrute$trend
tS.prodSansTrend <- ts.production.Totale.Brute - ts.decomposed.productionTotaleBrute$trend
plot(tS.prodSansTrend)
acf(tS.prodSansTrend)
acf(x = ts.decomposed.productionTotaleBrute)
acf(x = tS.prodSansTrend)
acf(x = ts.production.Totale.Brute)
ts.production.Totale.Brute
ts.production.Totale.Brute %>% acf()
ts.production.Totale.Brute %>% acf(.)
ts.production.Totale.Brute
ts.production.Totale.Brute %<% acf(.)
ts.production.Totale.Brute %>.% acf()
ts.production.Totale.Brute %>% . +1
ts.production.Totale.Brute %>% .+ 1
decomposed <- decompose(ts.production.Totale.Brute)
ts.random <- decomposed$random %>% as.ts(.)
ts.random
plot(ts.random)
arima(x = ts.random)
pacf(ts.random)
pacf(ts.random)
pacf(ts.random)
pacf(ts.random,na.action = na.pass)
acf(ts.random,na.action = na.pass)
arima(x = tS.random,seasonal = c(0,1,2,3))
arima(x = tS.random,seasonal = 2)
arima(x = ts.random,seasonal = c(1,2))
arima(x = ts.random,seasonal = c(1,14))
arima(x = ts.random,seasonal = c(1,12))
arima(x = ts.random,seasonal = 2)
arima(x = ts.random)
#### On en profite pour mettre en place les packages et les seeds.
library(knitr)
library(magrittr)
library(dplyr)
library(corrplot)
library(forecast)
library(gridExtra)
library(gridExtra)
library(grid)
library(ggplot2)
library(lattice)
install.packages(corrplot)
install.packages("corrplot")
install.packages("corrplot")
install.packages("forecast")
#### On en profite pour mettre en place les packages et les seeds.
library(knitr)
library(magrittr)
library(dplyr)
library(corrplot)
library(forecast)
library(forecast)
library(gridExtra)
install.packages("gridExtra")
library(gridExtra)
library(gridExtra)
library(gridExtra)
library(gridExtra)
library(grid)
library(ggplot2)
library(lattice)
library(forecast)
#fonctions utiles
ts.affichage <- function(ts, lag.max = 48,title="Mon titre"){
split.screen(c(2,1))
screen(1)
plot(ts,main=title)
split.screen(c(1,2),screen=2)
screen(3)
acf(ts,lag.max = lag.max,main="ACF",na.action = na.pass)
screen(4)
pacf(ts,lag.max = lag.max,main="pACF",na.action = na.pass)
close.screen(all = TRUE)
}
data <- read.csv("Donnees.csv", sep = ";", header = T)
names(data) <- c("Periode",
"Production.Totale.Brute",
"Production.Totale.Nette",
"Production.Primaire.Brute",
"Production.Primaire.Nette",
"Production.Nucleaire.Brute",
"Production.Nucleaire.Nette",
"Production.Hydraulique.Brute",
"Production.Hydraulique.Nette",
"Production.Eolienne.Brute",
"Production.Eolienne.Nette",
"Production.Photovoltaique.Brute",
"Production.Photovoltaique.Nette",
"Production.Thermique.Brute",
"Production.Thermique.Nette",
"Electricite.absorbee.pour.les.pompages.(en.GWh)",
"Importations",
"Exportations",
"Energie.appelee.reelle.yc.pertes",
"Livraisons.BasseTension",
"Livraisons.MoyenneTension",
"Livraisons.HauteTension",
"Energie.appelee.reelle.yc.pertes.corrigee.du.climat",
"Livraisons.BasseTension.CorClimat",
"Livraisons.MoyenneTension.CorClimat",
"Consommation.Primaire",
"Consommation.Primaire.CorClimat",
"Puissance.maximale.appelee",
"Indice.Climatique"
)
ts <- list(prod.totale = ts(data$Production.Totale.Brute, frequency = 12, start = c(1981, 1), end = c(2017, 11)),
import = ts(data$Importations, frequency = 12,  start = c(1981,1), end = c(2017, 11)),
photo = ts(data$Production.Photovoltaique.Brute[data$Production.Photovoltaique.Brute!=0], frequency = 12, start = c(2011,1), end = c(2017,11)))
plot(ts$prod.totale, ylab = "Production totale d'electricite brute", type = "l")
par(mfrow = c(1,2))
acf(ts$prod.totale)
pacf(ts$prod.totale)
decompose.prod.totale <- decompose(ts$prod.totale, type = "additive")
plot(decompose(ts$prod.totale, type = "additive"))
acf(decompose.prod.totale$random, na.action = na.pass)
pacf(decompose.prod.totale$random, na.action = na.pass)
ts$prod.totale %>% diff(.,12) %>% ts.affichage(title = "Production Brute Total d=0, D=1")
#On diffÃ©rencie alors encore
ts$prod.totale %>% diff() %>% diff(.,12) %>% ts.affichage(title = "Production Brute Total d=1, D=1")
#On fit donc un SARIMA(1,1,1)(1,1,1)_12
fit <- Arima(ts$prod.totale, order=c(1,1,1), seasonal=c(1,1,1))
ts.affichage(residuals(fit), title = "RÃ©sidus SARIMA(1,1,1)(1,1,1)")
fit
#Il nous faut tester la blancheur des rÃ©sidus
#Test Ljung-Box
x <- rep(0, 2, 48)
for (i in 2:48){
x[i]<- Box.test(residuals(fit), lag=i, fitdf=2, type="Ljung")$p.value
}
plot(x)
#qq plot test: il faut que ce soit aligner sur la premiÃ¨re bissectrice du plan
qqnorm((residuals(fit)-mean(residuals(fit)))/sd(residuals(fit)))
abline(0,1, col = "red")
#On projette sur 36 mois
predict.arima <- forecast(fit, h=36)
#On plot
plot(predict.arima)
#On fit un Holt-Winters basique sur la sÃ©rie
HW.model <- HoltWinters(ts$prod.totale)
#On projette
HW.predict <- predict(object = HW.model, 36, level = 0.95, prediction.interval = F) #Mettre prediction.interval = T si on veut l'intervalle de confiance
#On plot
plot(HW.model, HW.predict)
#On compare les 2 mÃ©thodes en comporant les SSE, c'est le SARIMA qui gagne Ã  ce jeu lÃ 
sum(fit$residuals^2) < HW.model$SSE
#On fit donc un SARIMA(1,1,1)(1,1,1)_12
fit <- Arima(ts$prod.totale, order=c(1,1,1), seasonal=c(1,1,1))
ts.affichage(residuals(fit), title = "RÃ©sidus SARIMA(1,1,1)(1,1,1)")
ts$import
plot(ts$import)
acf(ts$import)
pacf(ts$import)
acf(ts$import)
importDecompose <- decompose(ts$import,type = "multipicative")
importDecompose <- decompose(ts$import,type = "multiplicative")
importDecompose
plot(importDecompose)
importDecompose <- decompose(ts$import,type = "additive")
plot(importDecompose)
importDecompose <- decompose(ts$import,type = "multiplicative")
plot(importDecompose)
acf(importDecompose$random)
acf(importDecompose$random, na.action = na.pass())
acf(importDecompose$random, na.action = na.pass
acf(importDecompose$random, na.action = na.pass)
acf(importDecompose$random, na.action = na.pass)
plot(ts$import)
acf(ts$import)
pacf(ts$import)
importDecompose <- decompose(ts$import,type = "multiplicative")
plot(importDecompose)
acf(importDecompose$random, na.action = na.pass)
importDecompose <- decompose(ts$import,type = "additive")
acf(importDecompose$random, na.action = na.pass)
ts$prod.totale %>% diff(.,2) %>% ts.affichage(title = "Production Brute Total d=0, D=1")
ts$import %>% diff(.,2) %>% ts.affichage(title = "Production Brute Total d=0, D=1")
ts$import %>% diff(.,3) %>% ts.affichage(title = "Production Brute Total d=0, D=1")
ts$import %>% diff(.,12) %>% ts.affichage(title = "Production Brute Total d=0, D=1")
log(ts$import) %>% diff(.,12) %>% ts.affichage(title = "Production Brute Total d=0, D=1")
log(ts$import) %>% diff(.,12) %>% ts.affichage(title = "Production Brute Total d=0, D=1")
ts$import %>% diff(.,12) %>% ts.affichage(title = "Production Brute Total d=0, D=1")
importDecompose <- decompose(ts$import,type = "additive")
plot(importDecompose)
acf(importDecompose$random, na.action = na.pass)
logImportDecompose <- decompose(log(ts$import),type = "additive")
plot(logImportDecompose)
plot(importDecompose)
logImportDecompose <- decompose(log(ts$import),type = "additive")
plot(logImportDecompose)
plot(importDecompose)
plot(logImportDecompose)
importDecompose <- decompose(ts$import,type = "additive")
plot(importDecompose)
acf(importDecompose$random, na.action = na.pass)
ts$import %>% diff(.,12) %>% ts.affichage(title = "Production Brute Total d=0, D=1")
ts$import %>% diff(.,13) %>% ts.affichage(title = "Production Brute Total d=0, D=1")
ts$import %>% diff(.,15) %>% ts.affichage(title = "Production Brute Total d=0, D=1")
ts$import %>% diff(.,13) %>% ts.affichage(title = "Production Brute Total d=0, D=1")
ts$import %>% diff(.,14) %>% ts.affichage(title = "Production Brute Total d=0, D=1")
ts$import %>% diff(.,23) %>% ts.affichage(title = "Production Brute Total d=0, D=1")
ts$import %>% diff(.,24) %>% ts.affichage(title = "Production Brute Total d=0, D=1")
ts$import %>% diff(.,) %>% ts.affichage(title = "Production Brute Total d=0, D=1")
ts$import %>% diff(.) %>% ts.affichage(title = "Production Brute Total d=0, D=1")
ts$import %>% diff(.,2) %>% ts.affichage(title = "Production Brute Total d=0, D=1")
ts$import %>% diff(.,11) %>% ts.affichage(title = "Production Brute Total d=0, D=1")
ts$import %>% diff(.,13) %>% ts.affichage(title = "Production Brute Total d=0, D=1")
ts$import %>% diff() %>% ts.affichage(title = "Production Brute Total d=0, D=1")
ts$import %>% diff() %>% ts.affichage(title = "Import d=0, D=1")
#L'analyse de l'ACF et du pACF ne nous permet de conclure nettement en faveur de la stationnaritÃ©
?diff
ts$import
plot(ts$import)
importDecompose <- decompose(ts$import,type = "additive")
plot(importDecompose)
ts$import %>% diff() %>% ts.affichage(title = "Import d=0, D=1")
ts$import %>% diff(.,differences = 12) %>% ts.affichage(title = "Import d=0, D=1")
ts$import %>% diff(.,lag = 12) %>% ts.affichage(title = "Import d=0, D=1")
?diff
?diff
ts$import %>% diff.ts %>% ts.affichage(title = "Import d=0, D=1")
ts$import %>% diff.ts(.) %>% ts.affichage(title = "Import d=0, D=1")
diff.ts(importDecompose)
stats::diffinv(ts$import)
plot(stats::diffinv(ts$import))
plot(stats::diffinv(ts$import))
#------- plot de la série --------
ts$import
plot(ts$import)
#------- plot de la série --------
plot(ts$import)
importDecompose <- decompose(ts$import,type = "multiplicative")
acf(importDecompose$random, na.action = na.pass)
plot(importDecompose)
ts$import %>% diff.ts(.) %>% ts.affichage(title = "Import d=0, D=1")
ts$import %>% diffinv %>% ts.affichage(title = "Import d=0, D=1")
ts$import %>% diffinv %>% diffinv %>% ts.affichage(title = "Import d=0, D=1")
ts$import %>% diffinv %>% difftime() %>% ts.affichage(title = "Import d=0, D=1")
ts$import %>% diffinv %>% difftime %>% ts.affichage(title = "Import d=0, D=1")
ts$import %>% diff(.) %>% ts.affichage(title = "Import d=0, D=1")
ts$import %>% diff(.,lag = 12) %>% ts.affichage(title = "Import d=0, D=1")
importDecompose
plot(importDecompose)
importDecompose$random
ts$import %>% diff(.,lag = 6) %>% ts.affichage(title = "Import d=0, D=1")
ts$import %>% diff(.,lag = 7) %>% ts.affichage(title = "Import d=0, D=1")
ts$import %>% diff(.,lag = 8) %>% ts.affichage(title = "Import d=0, D=1")
ts$import %>% diff(.,lag = 9) %>% ts.affichage(title = "Import d=0, D=1")
ts$import %>% diff(.,lag = 11) %>% ts.affichage(title = "Import d=0, D=1")
ts$import %>% diff(.,lag = 12) %>% ts.affichage(title = "Import d=0, D=1")
ts$import %>% diff(.,lag = 12,differences = 2) %>% ts.affichage(title = "Import d=0, D=1")
ts$import %>% diff(.,lag = 12,differences = 3) %>% ts.affichage(title = "Import d=0, D=1")
ts$import %>% diff(.,lag = 12,differences = 4) %>% ts.affichage(title = "Import d=0, D=1")
ts$import %>% diff(.,lag = 12,differences = 5) %>% ts.affichage(title = "Import d=0, D=1")
ts$import %>% diff(.,differences = 5) %>% ts.affichage(title = "Import d=0, D=1")
ts$import %>% diff(.,differences = 6) %>% ts.affichage(title = "Import d=0, D=1")
ts$import %>% diff(.,differences = 11) %>% ts.affichage(title = "Import d=0, D=1")
ts$import %>% diff(.,differences = 12) %>% ts.affichage(title = "Import d=0, D=1")
install.packages("tseries")
install.packages("tseries")
library(tseries)
garch(ts$import)
plot(garch(ts$import))
#------- plot de la série --------
plot(ts$import)
plot(log(ts$import))
importDecompose <- decompose(log(ts$import),type = "additive")
plot(importDecompose)
logimport <- log(ts$import)
#------- ACF , PACF ----------
acf(logimport)
pacf(logimport)
importDecompose <- decompose(log(ts$import),type = "additive")
plot(importDecompose)
importDecompose <- decompose(logimport,type = "additive")
logimport.decompose <- decompose(logimport,type = "additive")
acf(importDecompose$random, na.action = na.pass)
pacf(importDecompose$random, na.action = na.pass)
ts$prod.totale %>% diff(.,12) %>% ts.affichage(title = "Production Brute Total d=0, D=1")
ts$prod.totale %>% diff(.,12) %>% ts.affichage(title = "Production Brute Total d=0, D=1")
rm(list=ls())
#### On en profite pour mettre en place les packages et les seeds.
library(knitr)
library(magrittr)
library(dplyr)
library(corrplot)
library(forecast)
library(gridExtra)
library(gridExtra)
library(grid)
library(ggplot2)
library(lattice)
library(forecast)
library(tseries)
#fonctions utiles
ts.affichage <- function(ts, lag.max = 48,title="Mon titre"){
split.screen(c(2,1))
screen(1)
plot(ts,main=title)
split.screen(c(1,2),screen=2)
screen(3)
acf(ts,lag.max = lag.max,main="ACF",na.action = na.pass)
screen(4)
pacf(ts,lag.max = lag.max,main="pACF",na.action = na.pass)
close.screen(all = TRUE)
}
data <- read.csv("Donnees.csv", sep = ";", header = T)
#Introduction
#L'objet de ce projet est l'?tude de 3 s?ries temporelles et la construction pour chaque s?rie d'un mod?le de pr?diction. Tous les outils d?velopp?s dans ce projet d?coulent du cours de S?ries Temporelles.
#Nous commencerons par pr?senter les donn?es, puis nous r?serverons une partie d?di?e par s?rie temporelle a analyser. Enfin dans une derniere partie, nous r?sumerons les r?sultats des pr?dictions et les observations qu'elles appellent.
names(data) <- c("Periode",
"Production.Totale.Brute",
"Production.Totale.Nette",
"Production.Primaire.Brute",
"Production.Primaire.Nette",
"Production.Nucleaire.Brute",
"Production.Nucleaire.Nette",
"Production.Hydraulique.Brute",
"Production.Hydraulique.Nette",
"Production.Eolienne.Brute",
"Production.Eolienne.Nette",
"Production.Photovoltaique.Brute",
"Production.Photovoltaique.Nette",
"Production.Thermique.Brute",
"Production.Thermique.Nette",
"Electricite.absorbee.pour.les.pompages.(en.GWh)",
"Importations",
"Exportations",
"Energie.appelee.reelle.yc.pertes",
"Livraisons.BasseTension",
"Livraisons.MoyenneTension",
"Livraisons.HauteTension",
"Energie.appelee.reelle.yc.pertes.corrigee.du.climat",
"Livraisons.BasseTension.CorClimat",
"Livraisons.MoyenneTension.CorClimat",
"Consommation.Primaire",
"Consommation.Primaire.CorClimat",
"Puissance.maximale.appelee",
"Indice.Climatique"
)
ts <- list(prod.totale = ts(data$Production.Totale.Brute, frequency = 12, start = c(1981, 1), end = c(2017, 11)),
import = ts(data$Importations, frequency = 12,  start = c(1981,1), end = c(2017, 11)),
photo = ts(data$Production.Photovoltaique.Brute[data$Production.Photovoltaique.Brute!=0], frequency = 12, start = c(2011,1), end = c(2017,11)))
##############################################################################################
#############______   Partie 1: la production totale brute d'electricite   ______#############
##############################################################################################
##Representation.
plot(ts$prod.totale, ylab = "Production totale d'electricite brute", type = "l")
#Cette repr?sentation appelle d?ja plusieurs observations:
#  - Pr?sence d'une saisonnalit? d'amplitude constante: on se place alors de la cadre des mod?les additifs
#  - Le trend ne semble pas lin?aire
# EDIT: log? racine?
#Avant de se lancer brutalement dans l'estimation d'un mod?le pour cette s?rie temporelle, on peut essayer de s'int?resser aux valeurs qui composent cette production globale brute.
#Dans cet esprit, on remarque que cette s?rie est la somme des productions brutes. Cependant, les s?ries n'?tant pas ind?pendantes, il serait laborieux de d?velopper plus sur cette voie la.
#Nous d?cidons donc de malgr? tout nous lancer directement dans l'?tude de la s?rie brutalement.
#cor <- cor(data.production.nette[-1])
#corrplot(corr = cor)
##Stationnarit?
#La sÃ©rie n'est clairement pas stationnaire. Pour se rassurer on peut regardes l'acf et le pacf
par(mfrow = c(1,2))
acf(ts$prod.totale)
pacf(ts$prod.totale)
##Decompose()
decompose.prod.totale <- decompose(ts$prod.totale, type = "additive")
plot(decompose(ts$prod.totale, type = "additive"))
acf(decompose.prod.totale$random, na.action = na.pass)
pacf(decompose.prod.totale$random, na.action = na.pass)
#Le bruit n'est pas stationnaire et prÃ©sente une saisonnalitÃ©
#############______  SARIMA  ______#############
#On diffÃ©rencie la saisonnalitÃ©
ts$prod.totale %>% diff(.,12) %>% ts.affichage(title = "Production Brute Total d=0, D=1")
#L'analyse de l'ACF et du pACF ne nous permet de conclure nettement en faveur de la stationnaritÃ©
#On diffÃ©rencie alors encore
ts$prod.totale %>% diff() %>% diff(.,12) %>% ts.affichage(title = "Production Brute Total d=1, D=1")
logimport.decompose <- decompose(logimport,type = "additive")
logimport <- log(ts$import)
#------- ACF , PACF ----------
acf(logimport)        #pas stationnaire en l'état
pacf(logimport)
logimport.decompose <- decompose(logimport,type = "additive")
acf(importDecompose$random, na.action = na.pass)  # A défaut que la composante aléatoire ne soit pas un bruit blanc, elle n'est même pas stationnaire
logimport.decompose <- decompose(logimport,type = "additive")
acf(logimport.Decompose$random, na.action = na.pass)  # A défaut que la composante aléatoire ne soit pas un bruit blanc, elle n'est même pas stationnaire
pacf(logimport.Decompose$random, na.action = na.pass)
acf(logimport.decompose$random, na.action = na.pass)  # A défaut que la composante aléatoire ne soit pas un bruit blanc, elle n'est même pas stationnaire
pacf(logimport.decompose$random, na.action = na.pass)
plot(importDecompose)
plot(logimport.decompose)
