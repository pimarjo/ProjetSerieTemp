plot(logphotofit)
logphotofit
acf(logphoto.decompose$random , na.action = na.pass)
kpss.test(logphoto.decompose$random)
logphoto.decompose$random %>% diff
logphoto.decompose$random %>% diff %>% plot
logphoto.decompose$random %>% diff %>% acf
logphoto.decompose$random %>% diff %>% acf(x = .,na.action =na.pass)
logphoto.decompose$random %>% diff(,2) %>% acf(x = .,na.action =na.pass)
logphoto.decompose$random %>% diff(,3) %>% acf(x = .,na.action =na.pass)
logphoto.decompose$random %>% diff(,4) %>% acf(x = .,na.action =na.pass)
logphoto.decompose$random %>% diff(.,4) %>% acf(x = .,na.action =na.pass)
logphoto.decompose$random %>% diff(x = .,lag = 2) %>% acf(x = .,na.action =na.pass)
logphoto.decompose$random %>% diff(x = .,lag = 10) %>% acf(x = .,na.action =na.pass)
logphoto.decompose$random %>% diff(x = .,lag = 11) %>% acf(x = .,na.action =na.pass)
logphoto.decompose$random %>% diff(x = .,lag = 9) %>% acf(x = .,na.action =na.pass)
logphoto.decompose$random %>% diff(x = .,lag = 8) %>% acf(x = .,na.action =na.pass)
logphoto.decompose$random %>% diff(x = .,lag = 7) %>% acf(x = .,na.action =na.pass)
logphoto.decompose$random %>% diff(x = .,lag = 6) %>% acf(x = .,na.action =na.pass)
logphoto.decompose$random %>% diff(x = .,lag = 3) %>% acf(x = .,na.action =na.pass)
logphoto.decompose$random %>% diff(x = .,lag = 2) %>% acf(x = .,na.action =na.pass)
logphoto.decompose$random %>% diff(x = .,lag = 4) %>% acf(x = .,na.action =na.pass)
logphoto.decompose$random %>% diff(x = .,lag = 10) %>% acf(x = .,na.action =na.pass)
logphoto.decompose$random %>% diff(x = .,lag = 12) %>% acf(x = .,na.action =na.pass)
logphoto.decompose$random %>% diff(x = .) %>% acf(x = .,na.action =na.pass)
logphoto.decompose$random %>% diff(x = .,differences = 2) %>% acf(x = .,na.action =na.pass)
logphoto.decompose$random %>% diff(x = .,differences = 3) %>% acf(x = .,na.action =na.pass)
logphoto.decompose$random %>% diff(x = .,differences = 4) %>% acf(x = .,na.action =na.pass)
logphoto.decompose$random %>% diff(x = ., lag = 10, differences = 4) %>% acf(x = .,na.action =na.pass)
logphoto.decompose$random %>% diff(x = ., lag = 10) %>% acf(x = .,na.action =na.pass)
kpss(logphoto.decompose$random %>% diff(x = ., lag = 10))
kpss(logphoto.decompose$random %>% diff(x = ., lag = 10))
kpss.test(logphoto.decompose$random %>% diff(x = ., lag = 10))
logphoto <- log(ts$photo)
plot(logphoto)
logphoto.decompose<-decompose(logphoto)
plot(logphoto.decompose)
acf(logphoto)
acf(logphoto.decompose$random)
acf(logphoto.decompose$random, na.action =na.pass)
acf(logphoto)
ts$prod.totale %>% diff(.,12) %T>% ts.affichage(title = "Production Brute Total d=0, D=1") %>% kpss.test(.)
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
ts$prod.totale %>% diff() %>% diff(.,12) %T>% ts.affichage(title = "Production Brute Total d=1, D=1") %>% kpss.test(.)
#On enregistre alors la sÃ©rie diffÃ©renciÃ©e
prod.totale.mod1 <- ts$prod.totale %>% diff() %>% diff(.,12)
logphoto <- log(ts$photo)
plot(logphoto)
logphoto.decompose<-decompose(logphoto)
plot(logphoto.decompose)
logphoto %>% diff(.1) %>% acf(x = .,na.action =na.pass)
logphoto %>% diff(.,1) %>% acf(x = .,na.action =na.pass)
logphoto %>% diff(.,2) %>% acf(x = .,na.action =na.pass)
logphoto %>% diff(.,3) %>% acf(x = .,na.action =na.pass)
logphoto %>% diff(.,4) %>% acf(x = .,na.action =na.pass)
logphoto %>% diff(.,5) %>% acf(x = .,na.action =na.pass)
logphoto %>% diff(.,10) %>% acf(x = .,na.action =na.pass)
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff() %>% diff(.,12) %T>% ts.affichage(title = "Production Brute Total d=1, D=1") %>% kpss.test(.)
kpss.test(logphoto.decompose$random %>% diff(x = ., lag = 10))
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff() %>% diff(.,12) %T>% ts.affichage() %>% kpss.test(.)
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff() %>% diff(.,1) %T>% ts.affichage() %>% kpss.test(.)
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff() %>% diff(.,2) %T>% ts.affichage() %>% kpss.test(.)
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff() %>% diff(.,3) %T>% ts.affichage() %>% kpss.test(.)
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff() %>% diff(.,10) %T>% ts.affichage() %>% kpss.test(.)
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff() %>% diff(.,10,10) %T>% ts.affichage() %>% kpss.test(.)
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff() %>% diff(.,10) %T>% ts.affichage() %>% kpss.test(.)
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff(.,10) %T>% ts.affichage() %>% kpss.test(.)
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff(.,2) %T>% ts.affichage() %>% kpss.test(.)
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff(.,2) %T>% ts.affichage() %>% kpss.test(.)
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff(.,2) %T>% ts.affichage() %>% kpss.test(.)
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff(.,2) %T>% ts.affichage() %>% kpss.test(.)
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff(.,2) %T>% ts.affichage() %>% kpss.test(.)
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff(.) %T>% ts.affichage() %>% kpss.test(.)
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %T>% ts.affichage() %>% kpss.test(.)
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff(.) %T>% ts.affichage() %>% kpss.test(.)
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff(.,12) %T>% ts.affichage() %>% kpss.test(.)
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff(.,12) %T>% ts.affichage() %>% kpss.test(.)
logimportdifferenciee <- logphoto %>% diff(.12)
logimportdifferenciee <- logphoto %>% diff(.,12)
decompose(logimportdifferenciee)
decompose(logimportdifferenciee) %>% plot
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff(.,12) %T>% ts.affichage() %>% kpss.test(.) # OUI, ca a l'air cool
logphotodifferenciee <- logphoto %>% diff(.,12)
fit<-arima(logphoto,order = c(0,12,1),seasonal = c(0,1,1))
fit<-arima(logphoto,order = c(0,1,1),seasonal = c(0,1,1))
fit
fit<-arima(logphoto,order = c(12,1,1),seasonal = c(0,1,1))
fit
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff(.,13) %T>% ts.affichage() %>% kpss.test(.) # OUI, ca a l'air cool
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff(.,12) %T>% ts.affichage() %>% kpss.test(.) # OUI, ca a l'air cool
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff(.,11) %T>% ts.affichage() %>% kpss.test(.) # OUI, ca a l'air cool
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff(.,12) %T>% ts.affichage() %>% kpss.test(.) # OUI, ca a l'air cool
fit<-arima(logphoto,order = c(1,1,1),seasonal = c(1,1,1))
fit
aic(fit)
AIC(fit)
kpss.test(logphoto)
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff(.,12) %T>% ts.affichage() %>% kpss.test(.) # OUI, ca a l'air cool
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff(.,12,lag=2) %T>% ts.affichage() %>% kpss.test(.) # OUI, ca a l'air cool
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff(.,12,lag=1) %T>% ts.affichage() %>% kpss.test(.) # OUI, ca a l'air cool
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff(.,12,lag=3) %T>% ts.affichage() %>% kpss.test(.) # OUI, ca a l'air cool
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff(.,12,lag=4) %T>% ts.affichage() %>% kpss.test(.) # OUI, ca a l'air cool
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff(.,12,lag=5) %T>% ts.affichage() %>% kpss.test(.) # OUI, ca a l'air cool
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff(.,12,lag=6) %T>% ts.affichage() %>% kpss.test(.) # OUI, ca a l'air cool
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff(.,12,lag=7) %T>% ts.affichage() %>% kpss.test(.) # OUI, ca a l'air cool
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff(.,12,lag=6) %T>% ts.affichage() %>% kpss.test(.) # OUI, ca a l'air cool
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff(.,12,lag=1) %T>% ts.affichage() %>% kpss.test(.) # OUI, ca a l'air cool
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff(.,12,lag=1) %T>% ts.affichage() %>% kpss.test(.) # OUI, ca a l'air cool
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff(.,12) %T>% ts.affichage() %>% kpss.test(.) # OUI, ca a l'air cool
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff(.,11) %T>% ts.affichage() %>% kpss.test(.) # OUI, ca a l'air cool
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff(.,12) %T>% ts.affichage() %>% kpss.test(.) # OUI, ca a l'air cool
#On enregistre alors la sÃ©rie diffÃ©renciÃ©e
prod.totale.mod1 <- ts$prod.totale %>% diff() %>% diff(.,12)
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
ts$prod.totale %>% diff() %>% diff(.,12) %T>% ts.affichage(title = "Production Brute Total d=1, D=1") %>% kpss.test(.)
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff(.,12) %T>% ts.affichage() %>% kpss.test(.) # OUI, ca a l'air cool
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff(.,12,lag=3) %T>% ts.affichage() %>% kpss.test(.) # OUI, ca a l'air cool
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff(.,12,lag=12) %T>% ts.affichage() %>% kpss.test(.) # OUI, ca a l'air cool
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff(.,12) %T>% ts.affichage() %>% kpss.test(.) # OUI, ca a l'air cool
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff(.,12) %T>% ts.affichage() %>% kpss.test(.) # OUI, ca a l'air cool
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff(.,12,lag=1) %T>% ts.affichage() %>% kpss.test(.) # OUI, ca a l'air cool
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff(.,lag=12) %T>% ts.affichage() %>% kpss.test(.) # OUI, ca a l'air cool
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff(.,lag=12,differences = 2) %T>% ts.affichage() %>% kpss.test(.) # OUI, ca a l'air cool
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff(.,lag=12,differences = 12) %T>% ts.affichage() %>% kpss.test(.) # OUI, ca a l'air cool
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff(.,lag=12,differences = 1) %T>% ts.affichage() %>% kpss.test(.) # OUI, ca a l'air cool
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff(.,lag=12,differences = 0) %T>% ts.affichage() %>% kpss.test(.) # OUI, ca a l'air cool
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff(.,lag=12,differences = 1) %T>% ts.affichage() %>% kpss.test(.) # OUI, ca a l'air cool
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff(.,lag=12) %T>% ts.affichage() %>% kpss.test(.) # OUI, ca a l'air cool
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff(.) %T>% ts.affichage() %>% kpss.test(.) # OUI, ca a l'air cool
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff(.,lag = 12) %T>% ts.affichage() %>% kpss.test(.) # OUI, ca a l'air cool
kpss.test(logphoto.decompose$random %>% diff(x = ., lag = 10))
logphoto.decompose<-decompose(logphoto)
plot(logphoto.decompose)
plot(logphoto.decompose$random + logphoto.decompose$trend)
plot(logphoto.decompose)
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff(.,lag = 12) %T>% ts.affichage() %>% kpss.test(.)
pacf(logphoto)
pacf(logphoto %>% diff(.,12))
fit<-arima(logphoto,order = c(1,1,1),seasonal = c(1,1,1))
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff(.,lag = 12) %T>% ts.affichage() %>% kpss.test(.)
fit<-arima(logphoto,order = c(1,12,1),seasonal = c(1,1,1))
fit<-arima(logphoto,order = c(1,12,1),seasonal = c(1,12,1))
fit<-arima(logphoto,order = c(1,12,1),seasonal = c(1,1,1))
fit<-arima(logphoto,order = c(1,2,1),seasonal = c(1,1,1))
fit
fit<-arima(logphoto,order = c(1,1,1),seasonal = c(1,1,1))
fit
fit<-arima(logphoto,order = c(1,1,1)
fit<-arima(logphoto,order = c(1,1,1)
)
fit<-arima(logphoto,order = c(1,1,1))
fit
fit<-arima(logphoto,order = c(12,1,1))
fit
fit<-arima(logphoto,order = c(12,12,12))
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff.ts(.,lag = 12) %T>% ts.affichage() %>% kpss.test(.)
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff(.,lag = 12) %T>% ts.affichage() %>% kpss.test(.)
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff(.,lag = 12) %T>% ts.affichage() %>% kpss.test(.)
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff(.) %T>% ts.affichage() %>% kpss.test(.)
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff(.,lag=12) %T>% ts.affichage() %>% kpss.test(.)
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
logphoto %>% diff(.,lag=12) %T>% ts.affichage() %>% kpss.test(.)
predict(fit)
forecast(fit)
predictlogphoto<-forecast(fit)
acf(predictlogphoto$residuals)
pacf(predictlogphoto$residuals)
fit<-arima(logphoto,order = c(1,1,1), seasonal = c(1,1,1))
predictlogphoto<-forecast(fit)
pacf(predictlogphoto$residuals)
fit<-arima(logphoto,order = c(1,1,1), seasonal = c(2,2,2))
predictlogphoto<-forecast(fit)
acf(predictlogphoto$residuals) #les résidus ont l'air stationnaires
pacf(predictlogphoto$residuals)
fit<-arima(logphoto,order = c(1,1,1), seasonal = c(1,1,1))
logphotopredict.norm <- (residuals(fit)-mean(residuals(fit)))/sd(residuals(fit))
#qq plot test: il faut que ce soit alignÃ© sur la premiÃ¨re bissectrice du plan
qqnorm(logphotopredict.norm)
abline(0,1, col = "red")
#Test de Kolmogorov Smirnov
ks.test(prod.totale.fit.res.norm, 'pnorm') #on accepte (p-value > 0.05)
fit<-arima(logphoto,order = c(1,1,0), seasonal = c(1,1,0))
predictlogphoto<-forecast(fit)
acf(predictlogphoto$residuals) #les résidus ont l'air stationnaires
pacf(predictlogphoto$residuals)
logphotopredict.norm <- (residuals(fit)-mean(residuals(fit)))/sd(residuals(fit))
#qq plot test: il faut que ce soit alignÃ© sur la premiÃ¨re bissectrice du plan
qqnorm(logphotopredict.norm)
abline(0,1, col = "red")
#Test de Kolmogorov Smirnov
ks.test(prod.totale.fit.res.norm, 'pnorm') #on accepte (p-value > 0.05)
fit<-arima(logphoto,order = c(1,1,0), seasonal = c(1,1,1))
predictlogphoto<-forecast(fit)
acf(predictlogphoto$residuals) #les résidus ont l'air stationnaires
pacf(predictlogphoto$residuals)
logphotopredict.norm <- (residuals(fit)-mean(residuals(fit)))/sd(residuals(fit))
#qq plot test: il faut que ce soit alignÃ© sur la premiÃ¨re bissectrice du plan
qqnorm(logphotopredict.norm)
abline(0,1, col = "red")
#Test de Kolmogorov Smirnov
ks.test(prod.totale.fit.res.norm, 'pnorm') #on accepte (p-value > 0.05)
#Test de Kolmogorov Smirnov
ks.test(logphotopredict.norm), 'pnorm') #on accepte (p-value > 0.05)
#Test de Kolmogorov Smirnov
ks.test(logphotopredict.norm, 'pnorm') #on accepte (p-value > 0.05)
logphoto <- log(ts$photo)
plot(logphoto)
logphoto.decompose<-decompose(logphoto)
plot(logphoto.decompose)
acf(logphoto)
acf(logphoto.decompose$random, na.action =na.pass)
acf(logphoto)
acf(logphoto.decompose$random, na.action =na.pass)
ks.test(logphoto.decompose$random)
ks.test(logphoto.decompose$random, 'pnorm')
(residuals(fit)-mean(residuals(fit)))/sd(residuals(fit)) %>%ks.test(., 'pnorm')
(logphoto.decompose$random-mean(logphoto.decompose$random))/sd(logphoto.decompose$random) %>%ks.test(., 'pnorm')
(logphoto.decompose$random-mean(logphoto.decompose$random))/sd(logphoto.decompose$random) %>%ks.test('pnorm')
(logphoto.decompose$random-mean(logphoto.decompose$random))/sd(logphoto.decompose$random)
acf(logphoto.decompose$random, na.action =na.pass)
logphotoRandom <- logphoto.decompose$random
logphotoRandom
acf(logphoto.decompose$random)
acf(logphoto.decompose$random, na.action =na.pass())
acf(logphoto.decompose$random, na.action =na.pass
acf(logphoto.decompose$random, na.action =na.pass)
(logphoto.decompose$random-mean(logphoto.decompose$random,na.action=na.pass)/sd(logphoto.decompose$random,na.action=na.pass) %>%ks.test('pnorm')
(logphoto.decompose$random-mean(logphoto.decompose$random,na.action=na.pass))/sd(logphoto.decompose$random,na.action=na.pass) %>%ks.test('pnorm')
(logphoto.decompose$random-mean(logphoto.decompose$random,na.action=na.pass))/sd(logphoto.decompose$random,na.action=na.pass) %>%ks.test(.,'pnorm',na.action = na.pass)
kpss.test(logphoto.decompose$random)
logphoto <- log(ts$photo)
plot(logphoto)
logphoto.decompose<-decompose(logphoto)
ts$photo
logphoto.decompose<-decompose(logphoto)
plot(logphoto.decompose)
acf(logphoto) #saisonnalité 12, Pas stationnaire
logphoto.decompose<-decompose(logphoto)
plot(logphoto.decompose)
kpss.test(fit)
kpss.test(residuals(fit))
rm(list=ls())
#### On en profite pour mettre en place les packages et les seeds.
library(knitr)
library(magrittr)
library(dplyr)
library(corrplot)
library(forecast)
library(gridExtra)
library(grid)
library(ggplot2)
library(gridExtra)
library(lattice)
library(forecast)
library(tseries)
#fonctions utiles
ts.affichage <- function(ts, lag.max = 48,title="Mon titre"){
split.screen(c(2,1))
screen(1)
plot(ts,main=title)
split.screen(c(1,2),screen=2)
screen(3)
acf(ts,lag.max = lag.max,main="ACF",na.action = na.pass)
screen(4)
pacf(ts,lag.max = lag.max,main="pACF",na.action = na.pass)
close.screen(all = TRUE)
}
data <- read.csv("Donnees.csv", sep = ";", header = T)
names(data) <- c("Periode",
"Production.Totale.Brute",
"Production.Totale.Nette",
"Production.Primaire.Brute",
"Production.Primaire.Nette",
"Production.Nucleaire.Brute",
"Production.Nucleaire.Nette",
"Production.Hydraulique.Brute",
"Production.Hydraulique.Nette",
"Production.Eolienne.Brute",
"Production.Eolienne.Nette",
"Production.Photovoltaique.Brute",
"Production.Photovoltaique.Nette",
"Production.Thermique.Brute",
"Production.Thermique.Nette",
"Electricite.absorbee.pour.les.pompages.(en.GWh)",
"Importations",
"Exportations",
"Energie.appelee.reelle.yc.pertes",
"Livraisons.BasseTension",
"Livraisons.MoyenneTension",
"Livraisons.HauteTension",
"Energie.appelee.reelle.yc.pertes.corrigee.du.climat",
"Livraisons.BasseTension.CorClimat",
"Livraisons.MoyenneTension.CorClimat",
"Consommation.Primaire",
"Consommation.Primaire.CorClimat",
"Puissance.maximale.appelee",
"Indice.Climatique"
)
ts <- list(prod.totale = ts(data$Production.Totale.Brute, frequency = 12, start = c(1981, 1), end = c(2017, 11)),
import = ts(data$Importations, frequency = 12,  start = c(1981,1), end = c(2017, 11)),
photo = ts(data$Production.Photovoltaique.Brute[data$Production.Photovoltaique.Brute!=0], frequency = 12, start = c(2011,1), end = c(2017,11)))
plot(ts$prod.totale, ylab = "Production totale d'electricite brute", type = "l")
par(mfrow = c(1,2))
acf(ts$prod.totale)
pacf(ts$prod.totale)
decompose.prod.totale <- decompose(ts$prod.totale, type = "additive") %T>% plot(.)
acf(decompose.prod.totale$random, na.action = na.pass)
pacf(decompose.prod.totale$random, na.action = na.pass)
close.screen(all = T)
ts$prod.totale %>% diff(.,12) %T>% ts.affichage(title = "Production Brute Total d=0, D=1") %>% kpss.test(.)
#On diffÃ©rencie alors encore et on test la stationnaritÃ©
ts$prod.totale %>% diff() %>% diff(.,12) %T>% ts.affichage(title = "Production Brute Total d=1, D=1") %>% kpss.test(.)
#On enregistre alors la sÃ©rie diffÃ©renciÃ©e
prod.totale.mod1 <- ts$prod.totale %>% diff() %>% diff(.,12)
#On fit donc un SARIMA(1,1,1)(1,1,1)_12
fit <- arima(ts$prod.totale, order=c(1,1,1), seasonal=c(1,1,1))
ts.affichage(residuals(fit), title = "RÃ©sidus SARIMA(1,1,1)(1,1,1)")
#On test la stationnaritÃ© des rÃ©sidus
kpss.test(residuals(fit))
plot(ts$photo)            # Modèle à priori multiplicatif
logphoto <- log(ts$photo) # On passe au log pour homogeneiser la variance et passer dans un modèle additif
plot(logphoto)            # Ok , ca semble additif
logphoto.decompose<-decompose(logphoto)
plot(logphoto.decompose)  # Saisonnalité 12
acf(logphoto) #Pas stationnaire
acf(logphoto.decompose$random, na.action =na.pass)
(logphoto.decompose$random-mean(logphoto.decompose$random,na.action=na.pass))/sd(logphoto.decompose$random,na.action=na.pass) %>%ks.test(.,'pnorm',na.action = na.pass)
acf(logphoto) #Pas stationnaire
pacf(logphoto)
acf(logphoto.decompose$random , na.action = na.pass)
diff(logphoto,2)
plot(logphotofit)
kpss.test(logphoto.decompose$random)
kpss.test(logphoto.decompose) #la partie aleatoire de la série est stationnaire
kpss.test(logphoto) #la partie aleatoire de la série est stationnaire
kpss.test(logphoto.decompose$random) #la partie aleatoire de la est stationnaire
#On différencie une fois avec une période de 12
logphoto %>% diff(.,lag=12) %T>% ts.affichage() %>% kpss.test(.)
fit<-arima(logphoto,order = c(1,1,0), seasonal = c(1,1,0))
fit
(1-pnorm(abs(fit$coef)/sqrt(diag(fit$var.coef))))*2
fit.significiant <= 0.05
fit.significiant <- (1-pnorm(abs(fit$coef)/sqrt(diag(fit$var.coef))))*2
fit.significiant <= 0.05
fit<-arima(logphoto,order = c(1,1,1), seasonal = c(1,1,1))
fit.significiant <- (1-pnorm(abs(fit$coef)/sqrt(diag(fit$var.coef))))*2
fit.significiant <= 0.05 #Le premier paramètre n'est pas significatif ...
fit<-arima(logphoto,order = c(1,1,0), seasonal = c(1,0,0))
fit.significiant <- (1-pnorm(abs(fit$coef)/sqrt(diag(fit$var.coef))))*2
fit.significiant <= 0.05 #Le premier paramètre n'est pas significatif ...
fit<-arima(logphoto,order = c(1,1,0), seasonal = c(1,1,0))
fit.significiant <- (1-pnorm(abs(fit$coef)/sqrt(diag(fit$var.coef))))*2
fit.significiant <= 0.05 #Le premier paramètre n'est pas significatif ...
fit<-arima(logphoto,order = c(2,1,0), seasonal = c(2,1,0))
fit.significiant <- (1-pnorm(abs(fit$coef)/sqrt(diag(fit$var.coef))))*2
fit.significiant <= 0.05 #Le premier paramètre n'est pas significatif ...
fit<-arima(logphoto,order = c(3,1,0), seasonal = c(3,1,0))
fit.significiant <- (1-pnorm(abs(fit$coef)/sqrt(diag(fit$var.coef))))*2
fit.significiant <= 0.05 #Le premier paramètre n'est pas significatif ...
predictlogphoto<-forecast(fit)
fit<-arima(logphoto,order = c(1,1,0), seasonal = c(3,1,0))
fit.significiant <- (1-pnorm(abs(fit$coef)/sqrt(diag(fit$var.coef))))*2
fit.significiant <= 0.05 #Le premier paramètre n'est pas significatif ...
fit<-arima(logphoto,order = c(1,1,0), seasonal = c(2,1,0))
fit.significiant <- (1-pnorm(abs(fit$coef)/sqrt(diag(fit$var.coef))))*2
fit.significiant <= 0.05 #Le premier paramètre n'est pas significatif ...
fit<-arima(logphoto,order = c(1,1,0), seasonal = c(1,1,0))
fit.significiant <- (1-pnorm(abs(fit$coef)/sqrt(diag(fit$var.coef))))*2
fit.significiant <= 0.05 #Le premier paramètre n'est pas significatif ...
fit.significiant <= 0.05 #Significatifs avec SAR = 2, pas avec SAR = 1
fit<-arima(logphoto,order = c(1,1,0), seasonal = c(2,1,0))
fit.significiant <- (1-pnorm(abs(fit$coef)/sqrt(diag(fit$var.coef))))*2
fit.significiant <= 0.05 #Significatifs avec SAR = 2, pas avec SAR = 1
predictlogphoto<-forecast(fit)
acf(predictlogphoto$residuals) #les résidus ont l'air stationnaires
pacf(predictlogphoto$residuals)
acf(fit)
acf(fit$residuals)
pacf(fit$residuals)
kpss.test(residuals(fit)) #stationnarité ok
?kpss.test
kpss.test(residuals(fit), null = "Trend") #stationnarité ok
kpss.test(residuals(fit), null = "Level") #stationnarité ok
kpss.test(residuals(fit), null = "Trend") #stationnarité ok
#Test de Kolmogorov Smirnov
ks.test(logphotopredict.norm, 'pnorm') #on accepte (p-value > 0.05)
predictlogphoto<-forecast(fit)
acf(predictlogphoto$residuals) #les résidus ont l'air stationnaires
pacf(predictlogphoto$residuals)
logphotopredict.norm <- (residuals(fit)-mean(residuals(fit)))/sd(residuals(fit))
#qq plot test: il faut que ce soit alignÃ© sur la premiÃ¨re bissectrice du plan
qqnorm(logphotopredict.norm)
abline(0,1, col = "red")
#Test de Kolmogorov Smirnov
ks.test(logphotopredict.norm, 'pnorm') #on accepte (p-value > 0.05)
fit<-arima(logphoto,order = c(1,1,0), seasonal = c(1,1,0))
fit.significiant <- (1-pnorm(abs(fit$coef)/sqrt(diag(fit$var.coef))))*2
fit.significiant <= 0.05 #Significatifs avec SAR = 2, pas avec SAR = 1
predictlogphoto<-forecast(fit)
acf(predictlogphoto$residuals) #les résidus ont l'air stationnaires
pacf(predictlogphoto$residuals)
logphotopredict.norm <- (residuals(fit)-mean(residuals(fit)))/sd(residuals(fit))
#qq plot test: il faut que ce soit alignÃ© sur la premiÃ¨re bissectrice du plan
qqnorm(logphotopredict.norm)
abline(0,1, col = "red")
#Test de Kolmogorov Smirnov
ks.test(logphotopredict.norm, 'pnorm') #on accepte (p-value > 0.05)
fit<-arima(logphoto,order = c(1,1,0), seasonal = c(2,1,0))
fit.significiant <- (1-pnorm(abs(fit$coef)/sqrt(diag(fit$var.coef))))*2
fit.significiant <= 0.05 #Significatifs avec SAR = 2, pas avec SAR = 1
predictlogphoto<-forecast(fit)
acf(predictlogphoto$residuals) #les résidus ont l'air stationnaires
pacf(predictlogphoto$residuals)
logphotopredict.norm <- (residuals(fit)-mean(residuals(fit)))/sd(residuals(fit))
#qq plot test: il faut que ce soit alignÃ© sur la premiÃ¨re bissectrice du plan
qqnorm(logphotopredict.norm)
abline(0,1, col = "red")
#Test de Kolmogorov Smirnov
ks.test(logphotopredict.norm, 'pnorm') #on accepte (p-value > 0.05)
kpss.test(residuals(fit)) #stationnarité ok
Box.test(residuals(fit))
fit<-arima(logphoto,order = c(1,1,0), seasonal = c(2,1,0))
fit
R2 <- 1 - ((fit$sigma2 / (fit$nobs-lenght(fit$coef))) / var(logphoto)/fit$nobs )
R2 <- 1 - ((fit$sigma2 / (fit$nobs-length(fit$coef))) / var(logphoto)/fit$nobs )
R2
predictlogphoto<-forecast(fit)
acf(predictlogphoto$residuals) #les résidus ont l'air stationnaires
pacf(predictlogphoto$residuals)
logphotopredict.norm <- (residuals(fit)-mean(residuals(fit)))/sd(residuals(fit) )
fit.R2 <- 1 - ((fit$sigma2 / (fit$nobs-length(fit$coef))) / var(logphoto)/fit$nobs ) #PARFAIT
predictlogphoto<-forecast(fit)
acf(predictlogphoto$residuals) #les résidus ont l'air stationnaires
pacf(predictlogphoto$residuals)
plot(predict())
plot(predictlogphoto
)
logphotopredict.norm <- (residuals(fit)-mean(residuals(fit)))/sd(residuals(fit) )
#qq plot test: il faut que ce soit alignÃ© sur la premiÃ¨re bissectrice du plan
qqnorm(logphotopredict.norm)
abline(0,1, col = "red")
#Test de Kolmogorov Smirnov
ks.test(logphotopredict.norm, 'pnorm') #on accepte (p-value > 0.05)
Box.test(logphotopredict.norm)
kpss.test(residuals(fit)) #stationnarité ok
kpss.test(logphotopredict.norm) #stationnarité ok
kpss.test(logphotopredict.norm) #stationnarité ok
#qq plot test: il faut que ce soit alignÃ© sur la premiÃ¨re bissectrice du plan
qqnorm(logphotopredict.norm)
abline(0,1, col = "red")
#Test de Kolmogorov Smirnov
ks.test(logphotopredict.norm, 'pnorm') #on accepte (p-value > 0.05)
